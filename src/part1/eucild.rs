/*
- 두정수 a와 b가 있고 a!=0이면 다음과 같은 등식을 만족하는 q와 r이 존재하며 이 두정수를 각각 몫과 나머지 라고한다.
b=a * q+r, 0<= r <|a|

- 또한 두 정수 a와 b가 있을 떄 b=a*C안 정수 c가 존재하면 a는 b의 약수라하고 b를 a의배수라고 한다.
a|b

- 임의의 세정수 a,b,c가 있을 떄 d가 a와 b의 약수라면 정수 d를 a와 b의 공약수 라고한다.
- 공약수 중에 a와 b의 최대공약수라 하고 최대 공약수를 gcd(a,b)라고 표시한다.
- 어떤 양의 정수 p가1과 자기 자신 이외에는 약수가 존재하지 않을 떄 이러한 p를 소수 라고한다.
- 반대로 소수가 아닌 a를 합성수 라고 한다.
- ex)소수 2,3,5,7  합성수 4 6 8 9
- 정수 a와 b가 공통적으로 약수를 가지지 못한다면 a와 b는 서로소 라 하며 gcd(a,b)= 1이라고 표시한다.

- 합동식과 잉여계
- 두정수 a와 b에 대하여 a-b가 정수 m의 배수일때 a와 b는 법 혹인 모듈러스에관하여 합동이라하고 
- a -=b mod m  -> a-b =km이라는 뜻이다.
- -=는 합동식을 나타내는 합동기호이다.
- 반사적성질 a-= a mod m
- 대칭적 성질 a-= b mod m 이면 b -=a mod m 
- 추이적 성질 a-= b mod m ,b -= c mod m 이면 a -= c mod m 
- a-=b mod m 에 대한 정수 집합 Z상의 동치류를 표현할떄 법 m에 대한 잉여류 라한다. 

*/

/*유클리드 알고리즘 
- 정수론의 기본적인 기술중 하나
- 원래 두양의 정수들에 대한 최대 공약수를 찾아내기 위한 알고리즘
- 확장 유클리드 알고리즘은 두개의 정수가 서로소인 경우에 한수에 대한 다른수의 곱셈에 대한 역원을 계산하는 데 사용한다.
- 기본적으로 유클리드 알고리즘을 이용한 최대공약수를 구하는 방법은 어떠한 음이 아닌 정수 a와 그보다 작은 작은 정수 b가 있을 떄 다음등식에 기반
- gcd(a,b)= gcd(b,a mod b)
- 24와 14의 최대 공약수를 구하는 절치
- gcd(24,14)= gcd(14,10)
            = gcd(10,4)
            = gcd(4,2)
            = gcd(2,0)
            = 2

- 유클리드 알고리즘은 두 정수가 서로 소인 경우라면 최대 공약수 만을 찾을 뿐 만 아니라 d에 대한 곱셈의 역원을 구하는 것으로 확장할수 있다.
*/



//최대 공약수를 구하는 함수
fn gcd(mut x: i32, mut y: i32) -> i32 {
    //두 수를 나눈 후 나눈 나머지를 구하여 0 이 될 떄까지 반복한다.
    while y != 0 {//y가 0이 될떄  x가 Greastest Common Divisor GCD이다.
        let remainder = x % y;//x와 y를 나눈 나머지
        x = y;//다음 연산에서 r= y % r을 수행해야 하므로
        y = remainder;//x에 y를 대입하고 y에 r을 대입한다.
    }
    x  //최대 공약수를 리턴한다.
}
//최대공배수
fn lcm(a:i32,b:i32)->i32 {
     a*b /gcd(a, b)
}
pub fn  main(){
    println!("{}",lcm(5 ,6));

    println!("{}",gcd(100 ,48))
} 